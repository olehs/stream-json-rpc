"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const stream_1 = require("stream");
const isRenderer = process.type === 'renderer';
const getSenderId = (e) => typeof e.senderId === 'number' ? e.senderId :
    typeof e.sender.id === 'number' ? e.sender.id : 0;
const getFullChannel = (channel, webContentsId) => `sei-${channel}-${webContentsId}`;
class ElectronIpcMainDuplex extends stream_1.Duplex {
    constructor(webContents, channel = 'data') {
        super();
        this.webContents = webContents;
        this.wcId = webContents.id;
        this.channel = getFullChannel(channel, 0);
        webContents.once('close', () => {
            this.end();
        });
        webContents.once('destroyed', () => {
            this.destroy();
        });
        electron_1.ipcMain.on(getFullChannel(channel, this.wcId), (_, data) => {
            this.push(data);
        });
        // init connection
        this.webContents.send(channel);
    }
    // tslint:disable-next-line
    _write(chunk, _encoding, callback) {
        this.webContents.send(this.channel, new Uint8Array(chunk));
        callback();
    }
    // tslint:disable-next-line
    _read(_size) { }
}
exports.ElectronIpcMainDuplex = ElectronIpcMainDuplex;
class ElectronIpcRendererDuplex extends stream_1.Duplex {
    constructor(webContentsId, channel = 'data') {
        super();
        this.wcId = typeof webContentsId === 'number' ? webContentsId : 0;
        this.channel = getFullChannel(channel, electron_1.remote.getCurrentWebContents().id);
        if (this.wcId === 0) {
            // renderer to main
            this.sendTo = electron_1.ipcRenderer.send.bind(electron_1.ipcRenderer);
        }
        else {
            // renderer to renderer
            this.sendTo = electron_1.ipcRenderer.sendTo.bind(electron_1.ipcRenderer, this.wcId);
        }
        electron_1.ipcRenderer.on(getFullChannel(channel, this.wcId), (_, data) => {
            this.push(data);
        });
        // init connection
        this.sendTo(channel);
    }
    // tslint:disable-next-line
    _write(chunk, _encoding, callback) {
        this.sendTo(this.channel, new Uint8Array(chunk));
        callback();
    }
    // tslint:disable-next-line
    _read(_size) { }
}
exports.ElectronIpcRendererDuplex = ElectronIpcRendererDuplex;
exports.firstConnectionHandler = (callback, channel) => {
    const seensIds = new Set();
    (isRenderer ? electron_1.ipcRenderer : electron_1.ipcMain).on(channel || 'data', (e, data) => {
        const senderId = getSenderId(e);
        if (!channel) { // default channel is 'data', and we just listen for first bytes received, not a particular event
            if (seensIds.has(senderId))
                return;
            seensIds.add(senderId);
        }
        let duplex;
        if (isRenderer) {
            duplex = new ElectronIpcRendererDuplex(senderId, channel || 'data');
        }
        else {
            duplex = new ElectronIpcMainDuplex(e.sender, channel || 'data');
        }
        if (!channel) {
            duplex.push(data);
        }
        callback(duplex);
    });
};
//# sourceMappingURL=data:application/json;base64,