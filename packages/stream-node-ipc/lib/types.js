"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["// Type definitions for node-ipc 9.1\r\n// Project: http://riaevangelist.github.io/node-ipc/\r\n// Definitions by: Arvitaly <https://github.com/arvitaly>, gjurgens <https://github.com/gjurgens>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n/// <reference types=\"node\" />\r\nimport { Socket } from 'net';\r\n\r\nexport interface IPC {\r\n  /**\r\n   * Set these variables in the ipc.config scope to overwrite or set default values\r\n   */\r\n  config: Config;\r\n  /**\r\n   * This is where socket connection refrences will be stored when connecting to them as a client via the ipc.connectTo\r\n   * or iupc.connectToNet. They will be stored based on the ID used to create them, eg : ipc.of.mySocket\r\n   */\r\n  of: any;\r\n  /**\r\n   * This is a refrence to the server created by ipc.serve or ipc.serveNet\r\n   */\r\n  server: Server;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#log\r\n   */\r\n  log(...args: any[]): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#connectto\r\n   * Used for connecting as a client to local Unix Sockets and Windows Sockets.\r\n   * This is the fastest way for processes on the same machine to communicate\r\n   * because it bypasses the network card which TCP and UDP must both use.\r\n   * @param id is the string id of the socket being connected to.\r\n   * The socket with this id is added to the ipc.of object when created.\r\n   * @param path is the path of the Unix Domain Socket File, if the System is Windows,\r\n   * this will automatically be converted to an appropriate pipe with the same information as the Unix Domain Socket File.\r\n   * If not set this will default to ipc.config.socketRoot+ipc.config.appspace+id\r\n   * @param callback this is the function to execute when the socket has been created\r\n   */\r\n  connectTo(id: string, path?: string, callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#connectto\r\n   * Used for connecting as a client to local Unix Sockets and Windows Sockets.\r\n   * This is the fastest way for processes on the same machine to communicate\r\n   * because it bypasses the network card which TCP and UDP must both use.\r\n   * @param id is the string id of the socket being connected to.\r\n   * The socket with this id is added to the ipc.of object when created.\r\n   * @param callback this is the function to execute when the socket has been created\r\n   */\r\n  connectTo(id: string, callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#connecttonet\r\n   * Used to connect as a client to a TCP or TLS socket via the network card.\r\n   * This can be local or remote, if local, it is recommended that you use the Unix\r\n   * and Windows Socket Implementaion of connectTo instead as it is much faster since it avoids the network card altogether.\r\n   * For TLS and SSL Sockets see the node-ipc TLS and SSL docs.\r\n   * They have a few additional requirements, and things to know about and so have their own doc.\r\n   * @param id is the string id of the socket being connected to. For TCP & TLS sockets,\r\n   * this id is added to the ipc.of object when the socket is created with a reference to the socket\r\n   * @param host is the host on which the TCP or TLS socket resides.\r\n   * This will default to ipc.config.networkHost if not specified\r\n   * @param port the port on which the TCP or TLS socket resides\r\n   * @param callback \tthis is the function to execute when the socket has been created\r\n   */\r\n  connectToNet(id: string, host?: string, port?: number, callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#connecttonet\r\n   * Used to connect as a client to a TCP or TLS socket via the network card.\r\n   * This can be local or remote, if local, it is recommended that you use the Unix\r\n   * and Windows Socket Implementaion of connectTo instead as it is much faster since it avoids the network card altogether.\r\n   * For TLS and SSL Sockets see the node-ipc TLS and SSL docs.\r\n   * They have a few additional requirements, and things to know about and so have their own doc.\r\n   * @param id is the string id of the socket being connected to. For TCP & TLS sockets,\r\n   * this id is added to the ipc.of object when the socket is created with a reference to the socket\r\n   * @param callback \tthis is the function to execute when the socket has been created\r\n   */\r\n  connectToNet(id: string, callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#connecttonet\r\n   * Used to connect as a client to a TCP or TLS socket via the network card.\r\n   * This can be local or remote, if local, it is recommended that you use the Unix\r\n   * and Windows Socket Implementaion of connectTo instead as it is much faster since it avoids the network card altogether.\r\n   * For TLS and SSL Sockets see the node-ipc TLS and SSL docs.\r\n   * They have a few additional requirements, and things to know about and so have their own doc.\r\n   * @param id is the string id of the socket being connected to.\r\n   * For TCP & TLS sockets, this id is added to the ipc.of object when the socket is created with a reference to the socket\r\n   * @param host is the host on which the TCP or TLS socket resides. This will default to ipc.config.networkHost if not specified\r\n   * @param port the port on which the TCP or TLS socket resides\r\n   * @param callback \tthis is the function to execute when the socket has been created\r\n   */\r\n  connectToNet(id: string, hostOrPort: number | string, callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#disconnect\r\n   * Used to disconnect a client from a Unix, Windows, TCP or TLS socket.\r\n   * The socket and its refrence will be removed from memory and the ipc.of scope.\r\n   * This can be local or remote. UDP clients do not maintain connections and so there are no Clients and this method has no value to them\r\n   * @param id is the string id of the socket from which to disconnect\r\n   */\r\n  disconnect(id: string): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#serve\r\n   * Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind.\r\n   * The server can emit events to specific Client Sockets, or broadcast events to all known Client Sockets\r\n   * @param path This is the path of the Unix Domain Socket File, if the System is Windows,\r\n   * this will automatically be converted to an appropriate pipe with the same information as the Unix Domain Socket File.\r\n   * If not set this will default to ipc.config.socketRoot+ipc.config.appspace+id\r\n   * @param callback This is a function to be called after the Server has started.\r\n   * This can also be done by binding an event to the start event like ipc.server.on('start',function(){});\r\n   */\r\n  serve(path: string, callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#serve\r\n   * Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind.\r\n   * The server can emit events to specific Client Sockets, or broadcast events to all known Client Sockets\r\n   * @param callback This is a function to be called after the Server has started.\r\n   * This can also be done by binding an event to the start event like ipc.server.on('start',function(){});\r\n   */\r\n  serve(callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#serve\r\n   * Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind.\r\n   * The server can emit events to specific Client Sockets, or broadcast events to all known Client Sockets\r\n   */\r\n  serve(callback: null): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#servenet\r\n   * @param host If not specified this defaults to the first address in os.networkInterfaces().\r\n   * For TCP, TLS & UDP servers this is most likely going to be 127.0.0.1 or ::1\r\n   * @param port The port on which the TCP, UDP, or TLS Socket server will be bound, this defaults to 8000 if not specified\r\n   * @param UDPType If set this will create the server as a UDP socket. 'udp4' or 'udp6' are valid values.\r\n   * This defaults to not being set. When using udp6 make sure to specify a valid IPv6 host, like ::1\r\n   * @param callback Function to be called when the server is created\r\n   */\r\n  serveNet(host?: string, port?: number, UDPType?: 'udp4' | 'udp6', callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#servenet\r\n   * @param UDPType If set this will create the server as a UDP socket. 'udp4' or 'udp6' are valid values.\r\n   * This defaults to not being set. When using udp6 make sure to specify a valid IPv6 host, like ::1\r\n   * @param callback Function to be called when the server is created\r\n   */\r\n  serveNet(UDPType: 'udp4' | 'udp6', callback?: () => void): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#servenet\r\n   * @param callback Function to be called when the server is created\r\n   * @param port The port on which the TCP, UDP, or TLS Socket server will be bound, this defaults to 8000 if not specified\r\n   */\r\n  serveNet(callbackOrPort: EmptyCallback | number): void;\r\n  /**\r\n   * https://www.npmjs.com/package/node-ipc#servenet\r\n   * @param host If not specified this defaults to the first address in os.networkInterfaces().\r\n   * For TCP, TLS & UDP servers this is most likely going to be 127.0.0.1 or ::1\r\n   * @param port The port on which the TCP, UDP, or TLS Socket server will be bound, this defaults to 8000 if not specified\r\n   * @param callback Function to be called when the server is created\r\n   */\r\n  serveNet(host: string, port: number, callback?: () => void): void;\r\n}\r\n\r\nexport type EmptyCallback = () => void;\r\n\r\nexport interface Client {\r\n  /**\r\n   * triggered when a JSON message is received. The event name will be the type string from your message\r\n   * and the param will be the data object from your message eg : { type:'myEvent',data:{a:1}}\r\n   */\r\n  on(event: string, callback: (...args: any[]) => void): Client;\r\n  /**\r\n   * triggered when an error has occured\r\n   */\r\n  on(event: 'error', callback: (err: any) => void): Client;\r\n  /**\r\n   * connect - triggered when socket connected\r\n   * disconnect - triggered by client when socket has disconnected from server\r\n   * destroy - triggered when socket has been totally destroyed, no further auto retries will happen and all references are gone\r\n   */\r\n  on(event: 'connect' | 'disconnect' | 'destroy', callback: () => void): Client;\r\n  /**\r\n   * triggered by server when a client socket has disconnected\r\n   */\r\n  on(event: 'socket.disconnected', callback: (socket: Socket, destroyedSocketID: string) => void): Client;\r\n  /**\r\n   * triggered when ipc.config.rawBuffer is true and a message is received\r\n   */\r\n  on(event: 'data', callback: (buffer: Buffer) => void): Client;\r\n  emit(event: string, value?: any): Client;\r\n  /**\r\n   * Unbind subscribed events\r\n   */\r\n  off(event: string, handler: any): Client;\r\n}\r\n\r\nexport interface Server extends Client {\r\n  /**\r\n   * start serving need top call serve or serveNet first to set up the server\r\n   */\r\n  start(): void;\r\n  /**\r\n   * close the server and stop serving\r\n   */\r\n  stop(): void;\r\n  emit(value: any): Client;\r\n  emit(event: string, value: any): Client;\r\n  emit(socket: Socket | SocketConfig, event: string, value?: any): Server;\r\n  emit(socketConfig: Socket | SocketConfig, value?: any): Server;\r\n}\r\n\r\nexport interface SocketConfig {\r\n  address?: string;\r\n  port?: number;\r\n}\r\n\r\nexport interface Config {\r\n  /**\r\n   * Default: 'app.'\r\n   * Used for Unix Socket (Unix Domain Socket) namespacing.\r\n   * If not set specifically, the Unix Domain Socket will combine the socketRoot, appspace,\r\n   * and id to form the Unix Socket Path for creation or binding.\r\n   * This is available incase you have many apps running on your system, you may have several sockets with the same id,\r\n   * but if you change the appspace, you will still have app specic unique sockets\r\n   */\r\n  appspace: string;\r\n  /**\r\n   * Default: '/tmp/'\r\n   * The directory in which to create or bind to a Unix Socket\r\n   */\r\n  socketRoot: string;\r\n  /**\r\n   * Default: os.hostname()\r\n   * The id of this socket or service\r\n   */\r\n  id: string;\r\n  /**\r\n   * Default: 'localhost'\r\n   * The local or remote host on which TCP, TLS or UDP Sockets should connect\r\n   * Should resolve to 127.0.0.1 or ::1 see the table below related to this\r\n   */\r\n  networkHost: string;\r\n  /**\r\n   * Default: 8000\r\n   * The default port on which TCP, TLS, or UDP sockets should connect\r\n   */\r\n  networkPort: number;\r\n  /**\r\n   * Default: 'utf8'\r\n   * the default encoding for data sent on sockets. Mostly used if rawBuffer is set to true.\r\n   * Valid values are : ascii utf8 utf16le ucs2 base64 hex\r\n   */\r\n  encoding: 'ascii' | 'utf8' | 'utf16le' | 'ucs2' | 'base64' | 'hex';\r\n  /**\r\n   * Default: false\r\n   * If true, data will be sent and received as a raw node Buffer NOT an Object as JSON.\r\n   * This is great for Binary or hex IPC, and communicating with other processes in languages like C and C++\r\n   */\r\n  rawBuffer: boolean;\r\n  /**\r\n   * Default: false\r\n   * Synchronous requests. Clients will not send new requests until the server answers\r\n   */\r\n  sync: boolean;\r\n  /**\r\n   * Default: false\r\n   * Turn on/off logging default is false which means logging is on\r\n   */\r\n  silent: boolean;\r\n  /**\r\n   * Default: true\r\n   * Turn on/off util.inspect colors for ipc.log\r\n   */\r\n  logInColor: boolean;\r\n  /**\r\n   * Default: 5\r\n   * Set the depth for util.inspect during ipc.log\r\n   */\r\n  logDepth: number;\r\n  /**\r\n   * Default: 100\r\n   * This is the max number of connections allowed to a socket. It is currently only being set on Unix Sockets.\r\n   * Other Socket types are using the system defaults\r\n   */\r\n  maxConnections: number;\r\n  /**\r\n   * Default: 500\r\n   * This is the time in milliseconds a client will wait before trying to reconnect to a server if the connection is lost.\r\n   * This does not effect UDP sockets since they do not have a client server relationship like Unix Sockets and TCP Sockets\r\n   */\r\n  retry: number;\r\n  /*  */\r\n  /**\r\n   * Default: false\r\n   * if set, it represents the maximum number of retries after each disconnect before giving up\r\n   * and completely killing a specific connection\r\n   */\r\n  maxRetries: boolean;\r\n  /**\r\n   * Default: false\r\n   * Defaults to false meaning clients will continue to retry to connect to servers indefinitely at the retry interval.\r\n   * If set to any number the client will stop retrying when that number is exceeded after each disconnect.\r\n   * If set to true in real time it will immediately stop trying to connect regardless of maxRetries.\r\n   * If set to 0, the client will NOT try to reconnect\r\n   */\r\n  stopRetrying: boolean;\r\n  /**\r\n   * Default: true\r\n   * Defaults to true meaning that the module will take care of deleting the IPC socket prior to startup.\r\n   * If you use node-ipc in a clustered environment where there will be multiple listeners on the same socket,\r\n   * you must set this to false and then take care of deleting the socket in your own code.\r\n   */\r\n  unlink: boolean;\r\n  /**\r\n   * Primarily used when specifying which interface a client should connect through.\r\n   * see the socket.connect documentation in the node.js api https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener\r\n   */\r\n  interfaces: {\r\n    /**\r\n     * Default: false\r\n     */\r\n    localAddress?: boolean;\r\n    /**\r\n     * Default: false\r\n     */\r\n    localPort?: boolean;\r\n    /**\r\n     * Default: false\r\n     */\r\n    family?: boolean;\r\n    /**\r\n     * Default: false\r\n     */\r\n    hints?: boolean;\r\n    /**\r\n     * Default: false\r\n     */\r\n    lookup?: boolean;\r\n  };\r\n  tls: {\r\n    rejectUnauthorized?: boolean;\r\n    public?: string;\r\n    private?: string;\r\n  };\r\n  /**\r\n   * Default: console.log\r\n   * The function which receives the output from ipc.log; should take a single string argument\r\n   */\r\n  logger(msg: string): void;\r\n}\r\n"]}