"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodeipc = require("node-ipc");
const stream_1 = require("stream");
class NodeIpcServerDuplex extends stream_1.Duplex {
    constructor(ipcClient, socket) {
        super();
        this.ipcClient = ipcClient;
        this.socket = socket;
        ipcClient.on('data', (data, s) => {
            if (s === socket) {
                this.push(data);
            }
        });
        ipcClient.on('socket.disconnected', (s) => {
            if (s === socket) {
                this.end();
                this.destroy();
            }
        });
    }
    // tslint:disable-next-line
    _write(chunk, _encoding, callback) {
        this.ipcClient.emit(this.socket, chunk);
        callback();
    }
    // tslint:disable-next-line
    _read(_size) { }
}
exports.NodeIpcServerDuplex = NodeIpcServerDuplex;
class NodeIpcClientDuplex extends stream_1.Duplex {
    constructor(ipcClient) {
        super();
        this.ipcClient = ipcClient;
        ipcClient.on('data', data => {
            this.push(data);
        });
    }
    // tslint:disable-next-line
    _write(chunk, _encoding, callback) {
        this.ipcClient.emit(chunk);
        callback();
    }
    // tslint:disable-next-line
    _read(_size) { }
}
exports.NodeIpcClientDuplex = NodeIpcClientDuplex;
exports.getClient = (appspace, id = 'client', options = {}) => {
    const ipc = new nodeipc.IPC();
    ipc.config.appspace = appspace;
    ipc.config.id = id;
    ipc.config.silent = true;
    ipc.config.retry = 1000;
    ipc.config.rawBuffer = true;
    ipc.config.encoding = 'hex';
    Object.assign(ipc.config, options);
    ipc.connectTo('server', () => { });
    return ipc.of.server;
};
exports.getServer = (appspace, options = {}) => {
    const ipc = new nodeipc.IPC();
    ipc.config.appspace = appspace;
    ipc.config.id = 'server';
    ipc.config.silent = true;
    ipc.config.retry = 1000;
    ipc.config.rawBuffer = true;
    ipc.config.encoding = 'hex';
    Object.assign(ipc.config, options);
    ipc.serve(() => { });
    ipc.server.start();
    return ipc.server;
};
exports.firstConnectionHandler = (ipcServer, callback) => {
    const seensIds = new WeakSet();
    const firstConnection = (data, socket) => {
        if (seensIds.has(socket))
            return;
        seensIds.add(socket);
        const duplex = new NodeIpcServerDuplex(ipcServer, socket);
        duplex.push(data);
        callback(duplex);
    };
    ipcServer.on('data', firstConnection);
    return ipcServer;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBb0M7QUFDcEMsbUNBQWdDO0FBR2hDLE1BQWEsbUJBQW9CLFNBQVEsZUFBTTtJQUk3QyxZQUFZLFNBQWlCLEVBQUUsTUFBYztRQUMzQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBUyxFQUFFLENBQVMsRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQVMsRUFBRSxFQUFFO1lBQ2hELElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNYLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNoQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDJCQUEyQjtJQUMzQixNQUFNLENBQUMsS0FBVSxFQUFFLFNBQWMsRUFBRSxRQUFhO1FBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEMsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsMkJBQTJCO0lBQzNCLEtBQUssQ0FBQyxLQUFVLElBQUcsQ0FBQztDQUNyQjtBQS9CRCxrREErQkM7QUFFRCxNQUFhLG1CQUFvQixTQUFRLGVBQU07SUFHN0MsWUFBWSxTQUFpQjtRQUMzQixLQUFLLEVB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QkFBbUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0lBQ0YsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFdEMsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU29ja2V0IH0gZnJvbSAnbmV0JztcclxuaW1wb3J0ICogYXMgbm9kZWlwYyBmcm9tICdub2RlLWlwYyc7XHJcbmltcG9ydCB7IER1cGxleCB9IGZyb20gJ3N0cmVhbSc7XHJcbmltcG9ydCB7IENsaWVudCwgU2VydmVyIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTm9kZUlwY1NlcnZlckR1cGxleCBleHRlbmRzIER1cGxleCB7XHJcbiAgaXBjQ2xpZW50OiBTZXJ2ZXI7XHJcbiAgc29ja2V0OiBTb2NrZXQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlwY0NsaWVudDogU2VydmVyLCBzb2NrZXQ6IFNvY2tldCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuaXBjQ2xpZW50ID0gaXBjQ2xpZW50O1xyXG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XHJcblxyXG4gICAgaXBjQ2xpZW50Lm9uKCdkYXRhJywgKGRhdGE6IGFueSwgczogU29ja2V0KSA9PiB7XHJcbiAgICAgIGlmIChzID09PSBzb2NrZXQpIHtcclxuICAgICAgICB0aGlzLnB1c2goZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlwY0NsaWVudC5vbignc29ja2V0LmRpc2Nvbm5lY3RlZCcsIChzOiBTb2NrZXQpID0+IHtcclxuICAgICAgaWYgKHMgPT09IHNvY2tldCkge1xyXG4gICAgICAgIHRoaXMuZW5kKCk7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgX3dyaXRlKGNodW5rOiBhbnksIF9lbmNvZGluZzogYW55LCBjYWxsYmFjazogYW55KSB7XHJcbiAgICB0aGlzLmlwY0NsaWVudC5lbWl0KHRoaXMuc29ja2V0LCBjaHVuayk7XHJcbiAgICBjYWxsYmFjaygpO1xyXG4gIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgX3JlYWQoX3NpemU6IGFueSkge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5vZGVJcGNDbGllbnREdXBsZXggZXh0ZW5kcyBEdXBsZXgge1xyXG4gIGlwY0NsaWVudDogQ2xpZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcihpcGNDbGllbnQ6IENsaWVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuaXBjQ2xpZW50ID0gaXBjQ2xpZW50O1xyXG5cclxuICAgIGlwY0NsaWVudC5vbignZGF0YScsIGRhdGEgPT4ge1xyXG4gICAgICB0aGlzLnB1c2goZGF0YSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gIF93cml0ZShjaHVuazogYW55LCBfZW5jb2Rpbmc6IGFueSwgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5pcGNDbGllbnQuZW1pdChjaHVuayk7XHJcbiAgICBjYWxsYmFjaygpO1xyXG4gIH1cclxuXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgX3JlYWQoX3NpemU6IGFueSkge31cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldENsaWVudCA9IChhcHBzcGFjZTogc3RyaW5nLCBpZDogc3RyaW5nID0gJ2NsaWVudCcsIG9wdGlvbnM6IG9iamVjdCA9IHt9KTogQ2xpZW50ID0+IHtcclxuICBjb25zdCBpcGMgPSBuZXcgbm9kZWlwYy5JUEMoKTtcclxuICBpcGMuY29uZmlnLmFwcHNwYWNlID0gYXBwc3BhY2U7XHJcbiAgaXBjLmNvbmZpZy5pZCA9IGlkO1xyXG4gIGlwYy5jb25maWcuc2lsZW50ID0gdHJ1ZTtcclxuICBpcGMuY29uZmlnLnJldHJ5ID0gMTAwMDtcclxuICBpcGMuY29uZmlnLnJhd0J1ZmZlciA9IHRydWU7XHJcbiAgaXBjLmNvbmZpZy5lbmNvZGluZyA9ICdoZXgnO1xyXG4gIE9iamVjdC5hc3NpZ24oaXBjLmNvbmZpZywgb3B0aW9ucyk7XHJcbiAgaXBjLmNvbm5lY3RUbygnc2VydmVyJywgKCkgPT4ge30pO1xyXG4gIHJldHVybiBpcGMub2Yuc2VydmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNlcnZlciA9IChhcHBzcGFjZTogc3RyaW5nLCBvcHRpb25zOiBvYmplY3QgPSB7fSk6IFNlcnZlciA9PiB7XHJcbiAgY29uc3QgaXBjID0gbmV3IG5vZGVpcGMuSVBDKCk7XHJcbiAgaXBjLmNvbmZpZy5hcHBzcGFjZSA9IGFwcHNwYWNlO1xyXG4gIGlwYy5jb25maWcuaWQgPSAnc2VydmVyJztcclxuICBpcGMuY29uZmlnLnNpbGVudCA9IHRydWU7XHJcbiAgaXBjLmNvbmZpZy5yZXRyeSA9IDEwMDA7XHJcbiAgaXBjLmNvbmZpZy5yYXdCdWZmZXIgPSB0cnVlO1xyXG4gIGlwYy5jb25maWcuZW5jb2RpbmcgPSAnaGV4JztcclxuICBPYmplY3QuYXNzaWduKGlwYy5jb25maWcsIG9wdGlvbnMpO1xyXG4gIGlwYy5zZXJ2ZSgoKSA9PiB7fSk7XHJcbiAgaXBjLnNlcnZlci5zdGFydCgpO1xyXG5cclxuICByZXR1cm4gaXBjLnNlcnZlcjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBmaXJzdENvbm5lY3Rpb25IYW5kbGVyID0gKGlwY1NlcnZlcjogU2VydmVyLCBjYWxsYmFjazogKHNvY2tldDogTm9kZUlwY1NlcnZlckR1cGxleCkgPT4gdm9pZCkgPT4ge1xyXG4gIGNvbnN0IHNlZW5zSWRzID0gbmV3IFdlYWtTZXQ8U29ja2V0PigpO1xyXG4gIGNvbnN0IGZpcnN0Q29ubmVjdGlvbiA9IChkYXRhOiBhbnksIHNvY2tldDogU29ja2V0KSA9PiB7XHJcbiAgICBpZiAoc2VlbnNJZHMuaGFzKHNvY2tldCkpIHJldHVybjtcclxuICAgIHNlZW5zSWRzLmFkZChzb2NrZXQpO1xyXG4gICAgY29uc3QgZHVwbGV4ID0gbmV3IE5vZGVJcGNTZXJ2ZXJEdXBsZXgoaXBjU2VydmVyLCBzb2NrZXQpO1xyXG4gICAgZHVwbGV4LnB1c2goZGF0YSk7XHJcbiAgICBjYWxsYmFjayhkdXBsZXgpO1xyXG4gIH07XHJcbiAgaXBjU2VydmVyLm9uKCdkYXRhJywgZmlyc3RDb25uZWN0aW9uKTtcclxuXHJcbiAgcmV0dXJuIGlwY1NlcnZlcjtcclxufTtcclxuIl19