"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_rpc_peer_1 = require("@magne4000/json-rpc-peer");
const errors_1 = require("./errors");
const uuidv4 = require('uuid/v4');
const callMethod = (fn, args) => {
    return new Promise((resolve) => {
        resolve(fn(args));
    });
};
const withTimeout = (fn, args, timeout, methodName, forwardErrors) => new Promise((resolve, reject) => {
    callMethod(fn, args)
        .then(resolve)
        .catch(e => {
        const error = e instanceof Error ? e : new Error(`${methodName} ${e}`);
        if (forwardErrors && typeof error.toJsonRpcError !== 'function') {
            error.toJsonRpcError = () => ({
                code: 1,
                message: error.message,
                data: {
                    stack: error.stack,
                },
            });
        }
        reject(error);
    });
    if (timeout > 0) {
        setTimeout(reject, timeout, new json_rpc_peer_1.JsonRpcError(`${methodName} timeout`));
    }
});
const peerCallback = (requestHandlers, notificationHandlers, options) => (message) => {
    switch (message.type) {
        case 'request': {
            if (!requestHandlers.has(message.method)) {
                throw new json_rpc_peer_1.JsonRpcError(`Method ${message.method} does not exists`);
            }
            const { timeout, handler } = requestHandlers.get(message.method);
            return withTimeout(handler, message.params, timeout, message.method, options.forwardErrors);
        }
        case 'notification': {
            if (!notificationHandlers.has(message.method)) {
                throw new json_rpc_peer_1.JsonRpcError(`Method ${message.method} does not exists`);
            }
            const handler = notificationHandlers.get(message.method);
            return handler(message.params);
        }
    }
};
class RPCPeer extends json_rpc_peer_1.default {
    constructor(options = {}) {
        const requestHandlers = new Map();
        const notificationHandlers = new Map();
        super(peerCallback(requestHandlers, notificationHandlers, options));
        this.id = uuidv4();
        this.requestHandlers = requestHandlers;
        this.notificationHandlers = notificationHandlers;
        this.defaultTimeout = options.defaultRequestTimeout === undefined ? 5000 : options.defaultRequestTimeout;
        this.closed = false;
        this.once('end', () => {
            this.closed = true;
        });
    }
    setRequestHandler(method, handler, timeout = this.defaultTimeout) {
        if (this.requestHandlers.has(method)) {
            throw new Error(`Method ${method} already handled`);
        }
        this.requestHandlers.set(method, {
            timeout,
            handler,
        });
        // Unsubscribe callback
        return () => {
            this.requestHandlers.delete(method);
        };
    }
    setNotificationHandler(method, handler) {
        if (this.notificationHandlers.has(method)) {
            throw new Error(`Method ${method} already handled`);
        }
        this.notificationHandlers.set(method, handler);
        // Unsubscribe callback
        return () => {
            this.notificationHandlers.delete(method);
        };
    }
    request(method, params) {
        return new Promise((resolve, reject) => {
            super.request(method, params)
                .then(resolve)
                .catch((e) => {
                reject(errors_1.wrapError(e));
            });
        });
    }
    destroy(error) {
        this.emit('close');
        this.emit('end');
        if (error) {
            this.emit('error', error);
        }
    }
}
exports.default = RPCPeer;
//# sourceMappingURL=data:application/json;base64,